package org.scalax.ugeneric.circe

import io.circe.{Encoder, Json}
import org.scalatest.funspec.AnyFunSpec
import org.scalatest.matchers.should.Matchers
import io.circe.syntax._
import org.scalax.ugeneric.circe.encoder.EncodeCaseClassApplication
import shapeless._
import shapeless.tag._

class TestUCirceEncoder extends AnyFunSpec with Matchers {

  trait IntTag

  val IntTag = tag[IntTag]

  trait LongTag

  val LongTag = tag[LongTag]

  case class Test04(i1: String, i2: String, i3: Int @@ IntTag, i4: Long @@ LongTag)

  case class Test04Compare(i1: String, i2: String, `被改过的 key：i3`: String, i4: String)

  implicit val longTagEncoder: Encoder[Long @@ LongTag] = Encoder.instance(s => Json.fromString("长整型值是：" + String.valueOf(s)))

  implicit val proImplicit: EncodeCaseClassApplication[Int @@ IntTag] =
    new EncodeCaseClassApplication[Int @@ IntTag]((name, t) => ("被改过的 key：" + name, Json.fromString("value 是：" + String.valueOf(t))))

  implicit val encoderTest04: Encoder[Test04] = UCirce.encodeCaseClass

  describe("A case class") {
    it("should encode to a json") {
      val test04        = Test04(i1 = "pro1", i2 = "pro2", i3 = IntTag(3), i4 = LongTag(4L))
      val test04Compare = Test04Compare(i1 = "pro1", i2 = "pro2", `被改过的 key：i3` = "value 是：3", i4 = "长整型值是：4")
      val test04CompareJson = {
        import io.circe.generic.auto._
        test04Compare.asJson
      }
      test04.asJson shouldEqual test04CompareJson
    }
  }
}
